*** hyperlynx.ulp.ORIG	2012-11-15 07:51:58.350360993 +0100
--- hyperlynx.ulp	2012-11-15 07:58:07.178366330 +0100
***************
*** 28,33 ****
--- 28,40 ----
         "* - First check filling of polygons and start Ratsnest<br>"
         "*   Export calculated polygon contours and filling<br>"
         "* 11.03.2012 alf@cadsoft.de<br>"
+        "* - export polygons as POLYGON/POLYVOID <br>"
+        "* - put quotes around device/layer names in case they contain whitespace<br>"
+        "* - fix typo in padstack format 0f) -> 0) <br>"
+        "* 16.08.2012 Koen De Vleeschauwer www.kdvelectronics.eu<br>"
+        "* - UNITS stated layer thickness was in ounce per square inch (WEIGHT),  <br>"
+        "*   but layer thickness was printed in inch (LENGTH). Fixed. <br>"
+        "* 14.11.2012 Koen De Vleeschauwer www.kdvelectronics.eu<br>"
         "* <br>";
  
  
***************
*** 150,155 ****
--- 157,164 ----
  
  
  
+ int PolygonID = 0;          // polygon id. First polygon = 1.
+ int needRatsNest = 1;       // ratsnest is needed to obtain polygon contour
  
  // copper layer info
  string LayerNames[];        // layer names
***************
*** 717,723 ****
      }
      printf("*\n\n");
      printf("{VERSION=2.10}  Compatible with Hyperlynx version 2.10.\n");
!     printf("{UNITS=ENGLISH WEIGHT}\n\n");
  
      // BOARD OVERALL AREA DIMENSIONS
      // Writes the board dimensions found on layer 20
--- 726,732 ----
      }
      printf("*\n\n");
      printf("{VERSION=2.10}  Compatible with Hyperlynx version 2.10.\n");
!     printf("{UNITS=ENGLISH LENGTH}\n\n");
  
      // BOARD OVERALL AREA DIMENSIONS
      // Writes the board dimensions found on layer 20
***************
*** 909,915 ****
        if ( UseComponentTypes == yes ) {
          if ( strstr( componentname, "IC" ) == 0 ) {
            if ( isdigit( componentname[2] ) ) {
!             printf("(IC REF=%s NAME=%s L=%s",componentname,componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
                       saypackagetype(E.package.name);
              unknowncomponenttype = no;
--- 918,924 ----
        if ( UseComponentTypes == yes ) {
          if ( strstr( componentname, "IC" ) == 0 ) {
            if ( isdigit( componentname[2] ) ) {
!             printf("(IC REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname,componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
                       saypackagetype(E.package.name);
              unknowncomponenttype = no;
***************
*** 917,974 ****
          }
          else if ( strstr( componentname, "BD" ) == 0 ) {
            if ( isdigit( componentname[2] ) ) {
!             printf("(BD REF=%s NAME=%s L=%s",componentname,componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
          }
          else if ( strstr( componentname, "BEAD" ) == 0 ) {
            if ( isdigit( componentname[4] ) ) {
!             printf("(BD REF=%s NAME=%s L=%s",componentname, componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
          }
          else if ( isdigit( componentname[1] ) ) {
            if ( strchr( componentname, 'U' ) == 0 ) {
!             printf("(IC REF=%s NAME=%s L=%s",componentname, componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
                       saypackagetype(E.package.name);
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'C' ) == 0 ) {
!             printf("(C REF=%s VAL=",componentname);
              ConvertCapValue(componentvalue);
!             printf(" L=%s",E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'R' ) == 0 ) {
!             printf("(R REF=%s VAL=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'L' ) == 0 ) {
!             printf("(L REF=%s VAL=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'D' ) == 0 ) {
!             printf("(CR REF=%s NAME=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'J' ) == 0 ) {
!             printf("(J REF=%s NAME=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'Q' ) == 0 ) {
!             printf("(J REF=%s NAME=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'T' ) == 0 ) {
!             printf("(J REF=%s NAME=%s L=%s",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
--- 926,983 ----
          }
          else if ( strstr( componentname, "BD" ) == 0 ) {
            if ( isdigit( componentname[2] ) ) {
!             printf("(BD REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname,componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
          }
          else if ( strstr( componentname, "BEAD" ) == 0 ) {
            if ( isdigit( componentname[4] ) ) {
!             printf("(BD REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
          }
          else if ( isdigit( componentname[1] ) ) {
            if ( strchr( componentname, 'U' ) == 0 ) {
!             printf("(IC REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                       E.mirror ? LayerNames[16] : LayerNames[1] );
                       saypackagetype(E.package.name);
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'C' ) == 0 ) {
!             printf("(C REF=\"%s\" VAL=",componentname);
              ConvertCapValue(componentvalue);
!             printf(" L=\"%s\"",E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'R' ) == 0 ) {
!             printf("(R REF=\"%s\" VAL=%s L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'L' ) == 0 ) {
!             printf("(L REF=\"%s\" VAL=%s L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'D' ) == 0 ) {
!             printf("(CR REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'J' ) == 0 ) {
!             printf("(J REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'Q' ) == 0 ) {
!             printf("(J REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
            else if ( strchr( componentname, 'T' ) == 0 ) {
!             printf("(J REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname, componentvalue,
                      E.mirror ? LayerNames[16] : LayerNames[1] );
              unknowncomponenttype = no;
            }
***************
*** 977,983 ****
  
        // handle unknown component types
        if ( ( unknowncomponenttype == yes ) || ( UseComponentTypes == no ) ) {
!         printf("(? REF=%s NAME=%s L=%s",componentname,componentvalue,
                  E.mirror ? LayerNames[16] : LayerNames[1] );
          saypackagetype(E.package.name);
        }
--- 986,992 ----
  
        // handle unknown component types
        if ( ( unknowncomponenttype == yes ) || ( UseComponentTypes == no ) ) {
!         printf("(? REF=\"%s\" NAME=\"%s\" L=\"%s\"",componentname,componentvalue,
                  E.mirror ? LayerNames[16] : LayerNames[1] );
          saypackagetype(E.package.name);
        }
***************
*** 1074,1086 ****
            printf("{PADSTACK=SMD%03d\n",i);   // **** 17.08.2005 alf@cadsoft.de ***
            // smds are square, round or oblong
  
!           // * if you wish layer name for layer number remark *
!           // * this next 2 lines und mark the second 2 lines  *
!           //  printf("(%s,%d,%5.*f,%5.*f,%.1f) Shape was Smd and is now Smd\n",
!           //           LayerNames[pad_layer[i]],  // Layer name
  
!           printf("(%d,%d,%5.*f,%5.*f,%.1f) %s Shape was Smd and is now Smd\n",
!                    pad_layer[i],           // Layer number
                     pad_shape_Top_rnds[i],
                     precision_of_pads, u2inch(pad_diameter_Top_or_dx[i]),
                     precision_of_pads, u2inch(pad_dy_elong_start[i]),
--- 1083,1092 ----
            printf("{PADSTACK=SMD%03d\n",i);   // **** 17.08.2005 alf@cadsoft.de ***
            // smds are square, round or oblong
  
!           // Using layer names throughout
  
!            printf("(%s,%d,%5.*f,%5.*f,%.1f) %s Shape was Smd and is now Smd\n",
!                    LayerNames[pad_layer[i]],           // Layer name
                     pad_shape_Top_rnds[i],
                     precision_of_pads, u2inch(pad_diameter_Top_or_dx[i]),
                     precision_of_pads, u2inch(pad_dy_elong_start[i]),
***************
*** 1105,1111 ****
  
              // Pad layer Top
              if (pad_shape_Top_rnds[i] == OBLONG) {
!               printf("(1,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
                        PadShapes[pad_shape_Top_rnds[i]],
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i] * pad_dy_elong_start[i]),
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
--- 1111,1118 ----
  
              // Pad layer Top
              if (pad_shape_Top_rnds[i] == OBLONG) {
!               printf("(%s,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
!                       LayerNames[1],
                        PadShapes[pad_shape_Top_rnds[i]],
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i] * pad_dy_elong_start[i]),
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
***************
*** 1115,1121 ****
                        HypPadShapes[pad_shape_Top_rnds[i]] );
              }
              else {  // OVALROUND or RECTSQUARE
!               printf("(1,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
                        PadShapes[pad_shape_Top_rnds[i]],
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
--- 1122,1129 ----
                        HypPadShapes[pad_shape_Top_rnds[i]] );
              }
              else {  // OVALROUND or RECTSQUARE
!               printf("(%s,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
!                       LayerNames[1],
                        PadShapes[pad_shape_Top_rnds[i]],
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
                        precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
***************
*** 1134,1140 ****
  
              // Pad layer Bottom
              if (pad_shape_Bott[i] == OBLONG) {
!               printf("(16,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
                        PadShapes[pad_shape_Bott[i]],
                        precision_of_pads,u2inch(pad_diameter_Bott[i] * pad_dy_elong_start[i]),
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
--- 1142,1149 ----
  
              // Pad layer Bottom
              if (pad_shape_Bott[i] == OBLONG) {
!               printf("(%s,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
!                       LayerNames[16],
                        PadShapes[pad_shape_Bott[i]],
                        precision_of_pads,u2inch(pad_diameter_Bott[i] * pad_dy_elong_start[i]),
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
***************
*** 1144,1150 ****
                        HypPadShapes[pad_shape_Bott[i]]);
              }
              else {  // OVALROUND or RECTSQUARE
!               printf("(16,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
                        PadShapes[pad_shape_Bott[i]],
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
--- 1153,1160 ----
                        HypPadShapes[pad_shape_Bott[i]]);
              }
              else {  // OVALROUND or RECTSQUARE
!               printf("(%s,%s,%5.*f,%5.*f,%.1f) %s Shape was %s and is now %s\n",
!                       LayerNames[16],
                        PadShapes[pad_shape_Bott[i]],
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
                        precision_of_pads,u2inch(pad_diameter_Bott[i]),
***************
*** 1161,1167 ****
                // layer used and allowed?
                if (copp_used_layer[vlay]) {    // layer used for copper an visible
                  if (vlay == 1)
!                   printf("(1,%s,%5.*f,%5.*f,0) %s Shape was %s and is now %s\n",
                            PadShapes[pad_shape_Top_rnds[i]],
                            precision_of_pads,u2inch(pad_diameter_Top_or_dx[i] * pad_dy_elong_start[i]),
                            precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
--- 1171,1178 ----
                // layer used and allowed?
                if (copp_used_layer[vlay]) {    // layer used for copper an visible
                  if (vlay == 1)
!                   printf("(%s,%s,%5.*f,%5.*f,0) %s Shape was %s and is now %s\n",
!                           LayerNames[1],
                            PadShapes[pad_shape_Top_rnds[i]],
                            precision_of_pads,u2inch(pad_diameter_Top_or_dx[i] * pad_dy_elong_start[i]),
                            precision_of_pads,u2inch(pad_diameter_Top_or_dx[i]),
***************
*** 1170,1176 ****
                            HypPadShapes[pad_shape_Top_rnds[i]] );
  
                  else if (vlay == 16)
!                   printf("(16,%s,%5.*f,%5.*f,0f) %s Shape was %s and is now %s\n",
                            PadShapes[pad_shape_Bott[i]],
                            precision_of_pads,u2inch(pad_diameter_Bott[i] * pad_dy_elong_start[i]),
                            precision_of_pads,u2inch(pad_diameter_Bott[i]),
--- 1181,1188 ----
                            HypPadShapes[pad_shape_Top_rnds[i]] );
  
                  else if (vlay == 16)
!                   printf("(%s,%s,%5.*f,%5.*f,0) %s Shape was %s and is now %s\n",
!                           LayerNames[16],
                            PadShapes[pad_shape_Bott[i]],
                            precision_of_pads,u2inch(pad_diameter_Bott[i] * pad_dy_elong_start[i]),
                            precision_of_pads,u2inch(pad_diameter_Bott[i]),
***************
*** 1178,1185 ****
                            EaglePadShapes[pad_shape_Top_rnds[i]],
                            HypPadShapes[pad_shape_Top_rnds[i]] );
  
!                 else  printf("(%d,0,%5.*f,%5.*f,0) %s always round in inner layer\n",
!                         vlay,
                          precision_of_pads,u2inch(pad_diameter_Inner[i]),
                          precision_of_pads,u2inch(pad_diameter_Inner[i]),
                          s );
--- 1190,1197 ----
                            EaglePadShapes[pad_shape_Top_rnds[i]],
                            HypPadShapes[pad_shape_Top_rnds[i]] );
  
!                 else  printf("(%s,0,%5.*f,%5.*f,0) %s always round in inner layer\n",
!                         LayerNames[vlay],
                          precision_of_pads,u2inch(pad_diameter_Inner[i]),
                          precision_of_pads,u2inch(pad_diameter_Inner[i]),
                          s );
***************
*** 1454,1493 ****
            }
          }
        }
        S.polygons(P) {
!         status("Polygon:"+S.name); // 2012-03-12
!         printf("* POLYGONS   NOT Allowed in HYP as of BoardSimm 2.2 Build 70.  ");
!         printf("Hopefully someday they will!\n");
!         printf("* I=Isolate S=Spacing W=Width O=Orphins_On/Off P=Pour_SOLID/HATCH T=Thermals_On/Off L=Layer) Polygon Format\n");
!         printf("*(PLG I=%5.*f S=%5.*f W=%5.*f O=%s P=%s T=%s L=%s) Polygon %s Data\n",
!                 precision_of_nets,u2inch(P.isolate),precision_of_nets,u2inch(P.spacing),
!                 precision_of_nets,u2inch(P.width),P.orphans ? "On" : "Off",
                  P.pour == POLYGON_POUR_SOLID ? "SOLID" : "HATCH",
!                 P.thermals ? "On" : "Off",LayerNames[P.layer],S.name);
!         /* // 2012-03-12
!         P.wires(W) {
!           printf("(SEG X1=%5.*f Y1=%5.*f X2=%5.*f Y2=%5.*f W=%5.*f L=%s) Polygon %s\n",
!                 precision_of_nets,u2inch(W.x1),precision_of_nets,u2inch(W.y1),
!                 precision_of_nets,u2inch(W.x2),precision_of_nets,u2inch(W.y2),
!                 precision_of_nets,u2inch(W.width),LayerNames[W.layer],S.name);
!         }
!         */
!         P.contours(W) { // 2012-03-12 export polygon contours
!           printf("(SEG X1=%5.*f Y1=%5.*f X2=%5.*f Y2=%5.*f W=%5.*f L=%s) Polygon %s\n",
!                   precision_of_nets,u2inch(W.x1),precision_of_nets,u2inch(W.y1),
!                   precision_of_nets,u2inch(W.x2),precision_of_nets,u2inch(W.y2),
!                   precision_of_nets,u2inch(W.width),LayerNames[W.layer],S.name);
!         }
!         P.fillings(W) { // 2012-03-12 export polygon fillings
!           printf("(SEG X1=%5.*f Y1=%5.*f X2=%5.*f Y2=%5.*f W=%5.*f L=%s) Polygon %s\n",
!                   precision_of_nets,u2inch(W.x1),precision_of_nets,u2inch(W.y1),
!                   precision_of_nets,u2inch(W.x2),precision_of_nets,u2inch(W.y2),
!                   precision_of_nets,u2inch(W.width),LayerNames[W.layer],S.name);
          }
        }
        printf("}\n\n");
      }
  
      // Unconnected Component Pins are on their own special net "HYP$xPy"
      // where x=element name and y=pin name
  
--- 1466,1541 ----
            }
          }
        }
+ 
        S.polygons(P) {
!         // POLYGON - Koen De Vleeschauwer - www.kdvelectronics.eu 12/08/12
! 
!         // print info
!         printf("* (PLG Isolate=%5.*f Spacing=%5.*f Width=%5.*f Orphans=%s Pour=%s Thermals=%s Layer=%s) Polygon %s Data\n",
!                 precision_of_nets, u2inch(P.isolate), precision_of_nets, u2inch(P.spacing),
!                 precision_of_nets, u2inch(P.width), P.orphans ? "On" : "Off",
                  P.pour == POLYGON_POUR_SOLID ? "SOLID" : "HATCH",
!                 P.thermals ? "On" : "Off", LayerNames[P.layer], S.name);
! 
!         PolygonID = PolygonID + 1;
! 
!         int x0, y0, first_wire = 1, first_polygon = 1; 
! 
!         // fillings is empty if ratsnest has not been run
!         P.fillings(F) {
!           needRatsNest = 0; 
!           break;
!           }
! 
!         // loop through polygon edges
!         P.contours(W) {
!           if (first_wire) {
!             if (first_polygon) {
!               // first partial polygon is positive
!               printf("  {POLYGON L=\"%s\" T=POUR W=%5.*f ID=%d X=%5.*f Y=%5.*f\n",
!                 LayerNames[P.layer], precision_of_nets,u2inch(P.width), PolygonID,
!                 precision_of_nets, u2inch(W.x1), precision_of_nets, u2inch(W.y1));
!               first_polygon = 0;
!               }
!             else {
!               // negative partial polygon
!               printf("  {POLYVOID ID=%d X=%5.*f Y=%5.*f\n",
!                 PolygonID,
!                 precision_of_nets, u2inch(W.x1), precision_of_nets, u2inch(W.y1));
!               }
!             
!             // a new partial polygon is starting 
!             x0 = W.x1; 
!             y0 = W.y1; 
!             
!             }
!           else {
!             // Output the wire 
!             printf("    (LINE X=%5.*f Y=%5.*f ) Polygon %s\n",
!                   precision_of_nets, u2inch(W.x1), precision_of_nets, u2inch(W.y1), S.name);
!             }
!           if (first_wire)
!             first_wire = 0; 
!           else if (W.x2 == x0 && W.y2 == y0) {
!             // this was the last wire of the partial polygon, 
!             // so the next wire (if any) will be the first wire
!             // of the next partial polygon 
!             first_wire = 1;
!             // output final wire of polygon
!             printf("    (LINE X=%5.*f Y=%5.*f ) Polygon %s\n",
!                   precision_of_nets, u2inch(W.x2), precision_of_nets, u2inch(W.y2), S.name);
!             printf("  }\n");
!           }
          }
        }
        printf("}\n\n");
      }
  
+    if (needRatsNest && (PolygonID != 0)) {
+      dlgMessageBox("Polygons may not have exported correctly.\nRun RATSNEST first.", "OK");
+      needRatsNest = 0;
+      }
+ 
      // Unconnected Component Pins are on their own special net "HYP$xPy"
      // where x=element name and y=pin name
  
